package fm.scala.common

import fm.scala.main.UpdateHelper
/**
 * This class implements the trait Configuration. It loads parameters from a 
 * given XML file.
 */
case class XMLConfiguration(filename: String) extends Configuration {

  val configuration = scala.xml.XML.loadFile(filename)

  val inputPath = retrieveConstantFromXML("inputPath", "input")
  val exportPath = retrieveConstantFromXML("exportPath", "result")
  val updateVersion = retrieveConstantFromXML("updateVersion", "1000000")
  val updateModule = retrieveConstantFromXML("updateModule", "PRJ")
  val updateDescription = retrieveConstantFromXML("updateDescription", "Database Update")
  val printWarnings = retrieveConstantFromXML("printWarnings", "true").toBoolean
  val timestampFormat = retrieveConstantFromXML("timestampFormat", "yyyy-MM-dd - HH:mm:ss")
  val isDebuggingEnabled = retrieveConstantFromXML("debugMode", "true").toBoolean

  val updateVersionString = getVersionString(updateVersion)
  val updateRoot = "UPDATE\\" + updateVersionString
  val schemataStoredIn: String = exportPath + "\\" + updateRoot

  val fileGenerationString = "Generated by UpdateHelper " + Constants.VERSION + " - " + timestamp
  //---------------------------------------------------------------------------
  // Support functions
  //---------------------------------------------------------------------------
  def retrieveConstantFromXML(constantName: String, standardText: String,
                              source: scala.xml.Elem = configuration): String = {
    val constant = (source \ constantName)
    constant.toList match {
      case List(node) => node.text
      case Nil => standardText
    }
  }

  def getVersionString(versionString: String): String = {
    val regex = new scala.util.matching.Regex(RegExStatement.PARSE_UPDATE_VERSION, "main", "sub", "revision")
    val regexResult = regex.findFirstMatchIn(versionString)

    List(regexResult.get.group("main").toInt,
      regexResult.get.group("sub").toInt,
      regexResult.get.group("revision").toInt).mkString(".")
  }

  private def parseListOfIntsFromString(s: String): List[Int] =
    s.split(" ").toList map (x => Integer.parseInt(x))
  //---------------------------------------------------------------------------
}
/**
 * This class implements the trait Configuration. It may be used for test 
 * classes.
 */
case class TestConfiguration extends Configuration {
  val schemataStoredIn = "result\\UPDATE"

  def inputPath = "test_input"

  def exportPath = "result"

  def updateVersion = ""

  def updateVersionString = ""

  def updateModule = ""

  def updateDescription = ""

  def printWarnings = true

  def timestampFormat = ""

  def updateRoot = ""

  def fileGenerationString = ""
    
  def isDebuggingEnabled = true
    
  override def timestamp = "2042-02-30 10:08:00"

}